#!/usr/bin/env python

#Lists various information from all bricks it can connect to.

import sys, traceback
import logging

import nxt.locator

def find_one_brick():
    b=None
    try:
        b = nxt.locator.find_one_brick()
        name, host, signal_strength, user_flash = b.get_device_info()
        print 'NXT brick name: %s' % name
        print 'Host address: %s' % host
        print 'Bluetooth signal strength: %s' % signal_strength
        print 'Free user flash: %s' % user_flash
        prot_version, fw_version = b.get_firmware_version()
        print 'Protocol version %s.%s' % prot_version
        print 'Firmware version %s.%s' % fw_version
        millivolts = b.get_battery_level()
        print 'Battery level %s mV' % millivolts
        b.sock.close()
    except:
        print "Error while running test:"
        traceback.print_tb(sys.exc_info()[2])
        print str(sys.exc_info()[1])
        if b:
            b.sock.close()
        
        
if '__main__' == __name__:
    # Late import, in case this project becomes a library, never to be run as main again.
    import optparse

    # Populate our options, -h/--help is already there for you.
    optp = optparse.OptionParser()
    optp.add_option('-v', '--verbose', dest='verbose', action='count',
                    help="Increase verbosity (specify multiple times for more)")
    # Parse the arguments (defaults to parsing sys.argv).
    opts, args = optp.parse_args()

    # Here would be a good place to check what came in on the command line and
    # call optp.error("Useful message") to exit if all it not well.

    log_level = logging.WARNING # default
    if opts.verbose == 1:
        log_level = logging.INFO
    elif opts.verbose >= 2:
        log_level = logging.DEBUG

    # Set up basic configuration, out to stderr with a reasonable default format.
    logging.basicConfig(level=log_level)
    
    find_one_brick()
